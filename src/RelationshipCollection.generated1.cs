//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;

// Copyright (c) 2017 Cyotek Ltd.
// http://mantissharp.net/
// Licensed under the MIT License. See LICENSE.txt for the full text.

// If you use this control in your applications, attribution, donations or contributions are welcome.

namespace MantisSharp
{
  public class RelationshipCollection : ICollection<Relationship>
  {
    #region Constants

    private readonly Dictionary<int, int> _indexesById;

    private readonly IList<Relationship> _items;

    #endregion

    #region Constructors

    public RelationshipCollection()
    {
      _indexesById = new Dictionary<int, int>();
      _items = new List<Relationship>();
    }

    #endregion

    #region Properties

    public Relationship this[int key]
    {
      get
      {
        int index;

        if (!_indexesById.TryGetValue(key, out index))
        {
          throw new KeyNotFoundException(string.Format("Cannot find key {0}.", key));
        }

        return _items[index];
      }
    }

    #endregion

    #region Methods

    public bool ContainsKey(int key)
    {
      return _indexesById.ContainsKey(key);
    }

    public bool TryGetValue(int key, out Relationship value)
    {
      int index;

      if (_indexesById.TryGetValue(key, out index))
      {
        value = _items[index];
      }
      else
      {
        index = -1;
        value = null;
      }

      return index != -1;
    }

    internal void Add(Relationship item)
    {
      int index;

      if (item == null)
      {
        throw new ArgumentNullException(nameof(item));
      }

      _items.Add(item);

      index = _items.Count - 1;

      _indexesById.Add(item.Id, index);
    }

    internal void Clear()
    {
      _indexesById.Clear();
      _items.Clear();
    }

    internal bool Remove(Relationship item)
    {
      return false;
    }

    #endregion

    #region ICollection<Relationship> Interface

    public bool Contains(Relationship item)
    {
      return this.ContainsKey(item.Id);
    }

    public void CopyTo(Relationship[] array, int arrayIndex)
    {
      _items.CopyTo(array, arrayIndex);
    }

    public IEnumerator<Relationship> GetEnumerator()
    {
      return _items.GetEnumerator();
    }

    void ICollection<Relationship>.Add(Relationship item)
    {
      this.Add(item);
    }

    void ICollection<Relationship>.Clear()
    {
      this.Clear();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
      return this.GetEnumerator();
    }

    bool ICollection<Relationship>.Remove(Relationship item)
    {
      return this.Remove(item);
    }

    public int Count
    {
      get { return _items.Count; }
    }

    bool ICollection<Relationship>.IsReadOnly
    {
      get { return false; }
    }

    #endregion
  }
}
