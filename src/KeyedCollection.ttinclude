//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:<#=Environment.Version.ToString() #>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;

namespace MantisSharp
{
  public class <#=className #> : IEnumerable<<#=itemType #>>
  {
    #region Constants

    private readonly IDictionary<string, int> _dictionary;

    private readonly IList<<#=itemType #>> _items;

    #endregion

    #region Constructors

    public <#=className #>()
    {
      _dictionary = new Dictionary<string, int>(StringComparer.OrdinalIgnoreCase);
      _items = new List<<#=itemType #>>();
    }

    #endregion

    #region Properties

    public int Count
    {
      get { return _items.Count; }
    }

    public <#=itemType #> this[string key]
    {
      get
      {
        int index;

        if (!_dictionary.TryGetValue(key, out index))
        {
          throw new KeyNotFoundException(string.Format("Cannot find key '{0}'.", key));
        }

        return _items[index];
      }
    }

    public <#=itemType #> this[int index]
    {
      get { return _items[index]; }
    }

    #endregion

    #region Methods

    public void Add(<#=itemType #> item)
    {
      string name;

      if (item == null)
      {
        throw new ArgumentNullException(nameof(item));
      }

      name = item.Name;

#if NET35
      if (string.IsNullOrEmpty(name))
#else
      if (string.IsNullOrWhiteSpace(name))
#endif
      {
        throw new ArgumentException("Unnamed items cannot be added.", nameof(item));
      }

      if (_dictionary.ContainsKey(name))
      {
        throw new ArgumentNullException(string.Format("An item with key '{0}' already exists.", name), nameof(item));
      }

      _items.Add(item);
      _dictionary.Add(name, _items.Count - 1);
    }

    public void Clear()
    {
      _dictionary.Clear();
      _items.Clear();
    }

    public bool ContainsKey(string key)
    {
      return _dictionary.ContainsKey(key);
    }

    public bool Remove(<#=itemType #> item)
    {
      return this.Remove(item.Name);
    }

    public bool Remove(string key)
    {
      int index;

      if (_dictionary.TryGetValue(key, out index))
      {
        _dictionary.Remove(key);
        _items.RemoveAt(index);
      }
      else
      {
        index = -1;
      }

      return index != -1;
    }

    public bool TryGetValue(string key, out <#=itemType #> value)
    {
      int index;

      if (_dictionary.TryGetValue(key, out index))
      {
        value = _items[index];
      }
      else
      {
        index = -1;
        value = null;
      }

      return index != -1;
    }

    #endregion

    #region IEnumerable<<#=itemType #>> Interface

    public IEnumerator<<#=itemType #>> GetEnumerator()
    {
      return _items.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
      return this.GetEnumerator();
    }

    #endregion
  }
}
